package applications;

import java.util.*;

public class HandleApplications {
	private Map<String,Skill> skills=new HashMap<>();
	private Map<String,Applicant> applicants=new HashMap<>();
	
	public void addSkills(String... names) throws ApplicationException {
		for(String name:names) {
			if(skills.containsKey(name))
				throw new ApplicationException(name+" duplicated");
			skills.put(name, new Skill(name));
		}
	}
	public void addPosition(String name, String... skillNames) throws ApplicationException {
		for(String skillname:skillNames) {
			if(!skills.containsKey(skillname))
				throw new ApplicationException(skillname + " undefined");
			if(skills.get(skillname).checkPosition(name))
				throw new ApplicationException(name +" duplicated");
		}
			
		for(String skillname:skillNames)
			skills.get(skillname).addPositions(name);
	}
	public Skill getSkill(String name) {return skills.get(name);}
	public Position getPosition(String name) {
		for(Skill skill:skills.values())
			if(skill.checkPosition(name))
				skill.getPosition(name);
		return null;
	}
	
	public void addApplicant(String name, String capabilities) throws ApplicationException {
		if(applicants.containsKey(name))
			throw new ApplicationException(name + " duplicated");
		String[] capabilityS=capabilities.split(",");
		for(String capability:capabilityS) {
			String[] element=capability.split(":");
			if(!skills.containsKey(element[0]))
				throw new ApplicationException(element[0]+" undefined");
			Integer level=Integer.parseInt(element[1]);
			if(level.compareTo(1)<0 || level.compareTo(10)>0)
				throw new ApplicationException(level+ " invalid level");
		}
		SortedMap<Skill,Integer> c=new TreeMap<>(Comparator.naturalOrder());
		for(String capability:capabilityS) {
			String[] element=capability.split(":");
			Skill s=skills.get(element[0]);
			Integer i=Integer.parseInt(element[1]);
			c.put(s, i);
		}
		applicants.put(name, new Applicant(name,c));
	}
	public String getCapabilities(String applicantName) throws ApplicationException {
		if(!applicants.containsKey(applicantName))
			throw new ApplicationException(applicantName+" undefined");
		return applicants.get(applicantName).getCapabilitiesToString();
	}
	
	public void enterApplication(String applicantName, String positionName) throws ApplicationException {
		
	}
	
	public int setWinner(String applicantName, String positionName) throws ApplicationException {
		return 0;
	}
	
	public SortedMap<String, Long> skill_nApplicants() {
		return null;
	}
	public String maxPosition() {
		return null;
	}
}

