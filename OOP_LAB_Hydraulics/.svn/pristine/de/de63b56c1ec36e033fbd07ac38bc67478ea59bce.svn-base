package hydraulic;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Main class that act as a container of the elements for
 * the simulation of an hydraulics system 
 * 
 */
public class HSystem {
	
//	private Element Elements[] = new Element[1];
//	private static int N=0,MAXN=1;
	private List<Element> elements =new ArrayList();
	/**
	 * Adds a new element to the system
	 * @param elem
	 */
	public void addElement(Element elem){
//		if(N==MAXN) {
//			MAXN*=2;
//			Element newElements[] = new Element[MAXN];
//			for(int i=0;i<Elements.length;i++)
//				newElements[i]=Elements[i];
//			Elements=newElements;
//			newElements=null;
//		}
//		Elements[N++]=elem;
		elements.add(elem);
	}
	
	/**
	 * returns the element added so far to the system.
	 * If no element is present in the system an empty array (length==0) is returned.
	 * 
	 * @return an array of the elements added to the hydraulic system
	 */
	public Element[] getElements(){
		//Qualunque classe che riceve il vettore principale
		//potrebbe eliminare il contenuto
		// => faccio una copia del vettore e lo ritorno
		
//		Element newElements[] = new Element[N];
//		for(int i=0;i<N;i++)
//			newElements[i]=Elements[i];
//		return newElements;
		
//		return Arrays.copyOf(Elements,N);
		
		//Versione con lista
		
//		Element[] result = new Element [elements.size()];
//		for(int i=0;i< elements.size();i++){
//			result[i] =elements.get(i);
//		}
//		return result;
		//versione cn lista semplificata
//		return toArray(elements,new Element[elements.size()]); // non è ingrado di fare un vettore di Elements
		return elements.toArray(new Element[elements.size()]);
	}
	
//	private static <T> T[] toArray(List<T> list,T[] result) {
//		for(int i=0;i<list.size();i++) {
//			result[i]=list.get(i);
//		}
//		return result;
//	}
	
	
	/**
	 * Prints the layout of the system starting at each Source
	 */
	public String layout(){
		// TODO: to be implemented
		return null;
	}
	
	/**
	 * starts the simulation of the system
	 */
	public void simulate(SimulationObserver observer){
//		for(int i=0;i<N;i++) {
//			if(elements[i] instanceof Source) {
//				elements[i].simulate(observer);
//			}
//		}
		for(Element e : elements) 
			if(e instanceof Source)
				e.simulate(observer);
	}

}
