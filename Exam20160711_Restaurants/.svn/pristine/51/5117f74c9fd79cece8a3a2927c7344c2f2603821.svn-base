package restaurantChain;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class Restaurant {
	private String name;
	private Integer tables;
	private Integer refused=new Integer(0);
	private Double income=new Double(0);
	private Map<String,Menu> menues=new HashMap<>();
	private Map<String,Integer> reservedTables=new HashMap<>();
	private Map<String,Boolean> tablesWithOrder=new HashMap<>();
	private List<Order> orders=new LinkedList<>();
	
	public Restaurant(String name, Integer nTavoli) {
		super();
		this.name = name;
		this.tables = nTavoli;
	}

	public String getName(){
		return name;
	}
	
	public void addMenu(String name, double price) throws InvalidName{
		if(menues.containsKey(name))
			throw new InvalidName();
		menues.put(name, new Menu(name,price));
	}
	
	public int reserve(String name, int persons) throws InvalidName{
		if(reservedTables.containsKey(name))
			throw new InvalidName();
		Integer neededTables=persons%4;
		if(neededTables.equals(0))
			neededTables=persons/4;
		else
			neededTables=(persons+4)/4;
		if(tables>=neededTables) {
			reservedTables.put(name, persons);
			tablesWithOrder.put(name, false);
			tables-=neededTables;
			return neededTables;
		}
		refused+=persons;
		return 0;
		
	}
	
	public int getRefused(){
		return refused;
	}
	
	public int getUnusedTables(){
		return tables;
	}
	
	public boolean order(String name, String... menu) throws InvalidName{
		if(!reservedTables.containsKey(name))
			throw new InvalidName();
		for(String nameMenu:menu)
			if(!menues.containsKey(nameMenu))
				throw new InvalidName();
		if(reservedTables.get(name)>menu.length)
			return false;
		List<Menu> orderedMenues=new LinkedList<>();
		for(String nameMenu:menu)
			orderedMenues.add(menues.get(nameMenu));
		orders.add(new Order(name,orderedMenues));
		tablesWithOrder.put(name, true);
		return true;
	}
	
	public List<String> getUnordered(){
		return tablesWithOrder.entrySet().stream()
				.filter(e->!e.getValue())
				.map(e->e.getKey())
				.sorted()
				.collect(Collectors.toList());
	}
	
	public List<Order> getOrdersOf(String name){
		return orders.stream()
				.filter(o->o.getReferentName().equals(name))
				.collect(Collectors.toList());
	}
	
	public double pay(String name) throws InvalidName{
		if(!reservedTables.containsKey(name))
			throw new InvalidName();
		Integer persons=reservedTables.remove(name);
		Integer neededTables=persons%4;
		if(neededTables.equals(0))
			neededTables=persons/4;
		else
			neededTables=(persons+4)/4;
		tables+=neededTables;
		if(!tablesWithOrder.get(name)) {
			tablesWithOrder.remove(name);
			return 0;
		}
		Double price=0.0;
		for(Order o:getOrdersOf(name))
			price+=o.getPrice();
		tablesWithOrder.remove(name);
		orders.removeAll(getOrdersOf(name));
		income+=price;
		return price;
			
	}
	
	public List<String> getUnpaid(){
		return tablesWithOrder.entrySet().stream()
				.filter(e->e.getValue())
				.map(e->e.getKey())
				.collect(Collectors.toList());
	}
	
	public double getIncome(){
		return income;
	}

}
