package managingProperties;

import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class PropertyManager {
	private Map<String,Building> buildings=new HashMap<>();
	private Map<String,Owner> owners=new HashMap<>();
	private Map<String,Appartment> appartments=new HashMap<>();
	private SortedMap<String,Profession> professions = new TreeMap<>();
//	private Map<String,Professionist> professionists =new HashMap<>();
	/**
	 * Add a new building 
	 */
	public void addBuilding(String building, int n) throws PropertyException {
		if(buildings.containsKey(building) || n>100 || n<1)
			throw new PropertyException();
		buildings.put(building, new Building(building,n));
	}

	public void addOwner(String owner, String... apartments) throws PropertyException {
		if(owners.containsKey(owner))
			throw new PropertyException();
		for(String s:apartments) {
			if(appartments.containsKey(s))
				throw new PropertyException();
			String[] par=s.split(":");
			String idBuild=par[0];
			int numApp=Integer.parseInt(par[1]);
			if(!buildings.containsKey(idBuild) || numApp<1 || numApp>buildings.get(idBuild).getnApp())
				throw new PropertyException();
		}
		Set <Appartment> apps=new HashSet<>();
		for(String s:apartments) {
			String[] par=s.split(":");
			Building b=buildings.get(par[0]);
			int numApp=Integer.parseInt(par[1]);
			Appartment a=new Appartment(b,numApp);
			apps.add(a);
			b.addAppartment(a);
			appartments.put(s, a);
		}
		Owner o=new Owner(owner,apps);
		owners.put(owner, o);
	}

	/**
	 * Returns a map ( number of apartments => list of buildings ) 
	 * 
	 */
	public SortedMap<Integer, List<String>> getBuildings() {
		return buildings.values().stream()
				.sorted(Comparator.comparing(Building::getId))
				.collect(Collectors.groupingBy(Building::getnApp,
						TreeMap::new,
						Collectors.mapping(Building::getId, Collectors.toList())));
	}

	public void addProfessionals(String profession, String... professionals) throws PropertyException {
		if(professions.containsKey(profession))
			throw new PropertyException();
		List<String> professionists=professions.values().stream()
				.map(Profession::getProfessionista)
				.flatMap(l->l.stream())
				.collect(Collectors.toList());
		for(String s:professionals) {
			if(professionists.contains(s))
				throw new PropertyException();
		}
		Profession p =new Profession(profession,Stream.of(professionals).collect(Collectors.toList()));
		professions.put(profession, p);
	}

	/**
	 * Returns a map ( profession => number of workers )
	 *
	 */
	public SortedMap<String, Integer> getProfessions() {
		return professions.values().stream()
				.collect(Collectors.groupingBy(Profession::getName,
						TreeMap::new,
						Collectors.summingInt(p->p.getProfessionista().size())
						));
	}

	public int addRequest(String owner, String apartment, String profession) throws PropertyException {
		
		return 0;
	}

	public void assign(int requestN, String professional) throws PropertyException {
		
		
	}

	public List<Integer> getAssignedRequests() {
		
		return null;
	}

	
	public void charge(int requestN, int amount) throws PropertyException {
		
		
	}

	/**
	 * Returns the list of request ids
	 * 
	 */
	public List<Integer> getCompletedRequests() {
		
		return null;
	}
	
	/**
	 * Returns a map ( owner => total expenses )
	 * 
	 */
	public SortedMap<String, Integer> getCharges() {
		
		return null;
	}

	/**
	 * Returns the map ( building => ( profession => total expenses) ).
	 * Both buildings and professions are sorted alphabetically
	 * 
	 */
	public SortedMap<String, Map<String, Integer>> getChargesOfBuildings() {
		
		return null;
	}

}
